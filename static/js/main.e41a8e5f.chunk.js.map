{"version":3,"sources":["assets/me.jpg","header/AppHeader.js","social/Social.js","hero/Hero.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AppHeader","className","Component","Social","href","alt","height","width","src","Hero","id","MyFace","align","App","role","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0IAAAA,EAAOC,QAAU,IAA0B,gC,kPCU5BC,G,6KAJX,OAAS,yBAAKC,UAAU,8BAAf,oB,GAFWC,c,wBCiDTC,G,6KA/CX,OACE,wBAAIF,UAAU,eACZ,wBAAIA,UAAU,cACZ,uBAAGG,KAAK,+CACN,yBACEC,IAAI,cACJC,OAAO,KACPC,MAAM,KACNC,IAAI,wEAIV,wBAAIP,UAAU,cACZ,uBAAGG,KAAK,2CACN,yBACEC,IAAI,eACJC,OAAO,KACPC,MAAM,KACNC,IAAI,yEAIV,wBAAIP,UAAU,cACZ,uBAAGG,KAAK,8CACN,yBACEC,IAAI,kBACJC,OAAO,KACPC,MAAM,KACNC,IAAI,2EAIV,wBAAIP,UAAU,cACZ,uBAAGG,KAAK,qDACN,yBACEC,IAAI,gBACJC,OAAO,KACPC,MAAM,KACNC,IAAI,+E,GAxCGN,cCmCNO,E,uKA/BX,OACE,yBAAKR,UAAU,aACb,yBAAKA,UAAU,uBACb,yBAAKS,GAAG,eAAeT,UAAU,oBAC/B,yBAAKI,IAAI,sBAAsBJ,UAAU,wBAAwBO,IAAKG,IAAQC,MAAM,SACpF,yBAAKX,UAAU,gCACb,4CACA,wBAAIA,UAAU,cAAd,4BACA,uBAAGA,UAAU,oBAAb,6MAMA,uBAAGA,UAAU,oBAAb,qHAIA,uBAAGA,UAAU,oBAAb,2GAIA,kBAAC,EAAD,c,GAxBKC,aCYJW,MAbf,WACE,OACE,yBAAKZ,UAAU,UAAUa,KAAK,QAC5B,gCACE,kBAAC,EAAD,OAEF,6BACE,kBAAC,EAAD,SCAYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e41a8e5f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/me.474a0c51.jpg\";","import React, {Component} from 'react';\n\nimport \"./AppHeader.css\";\n\nclass AppHeader extends Component {\n  render() {\n    return  (<div className=\"navbar-header navbar-white\">Scott Murray</div>);\n  }\n}\n\nexport default AppHeader;\n","import React, { Component } from \"react\";\n\nimport \"./Social.css\";\n\nclass Social extends Component {\n  render() {\n    return (\n      <ul className=\"social-list\">\n        <li className=\"social-svg\">\n          <a href=\"https://www.github.com/scott-the-programmer\">\n            <img\n              alt=\"github icon\"\n              height=\"40\"\n              width=\"40\"\n              src=\"https://cdn.jsdelivr.net/npm/simple-icons@latest/icons/github.svg\"\n            />\n          </a>\n        </li>\n        <li className=\"social-svg\">\n          <a href=\"https://www.twitter.com/ScottProgrammer\">\n            <img\n              alt=\"twitter icon\"\n              height=\"40\"\n              width=\"40\"\n              src=\"https://cdn.jsdelivr.net/npm/simple-icons@latest/icons/twitter.svg\"\n            />\n          </a>\n        </li>\n        <li className=\"social-svg\">\n          <a href=\"https://www.instagram.com/shxppingtrxllxy/\">\n            <img\n              alt=\"instragram icon\"\n              height=\"40\"\n              width=\"40\"\n              src=\"https://cdn.jsdelivr.net/npm/simple-icons@latest/icons/instagram.svg\"\n            />\n          </a>\n        </li>\n        <li className=\"social-svg\">\n          <a href=\"https://www.linkedin.com/in/scottalexandermurray/\">\n            <img\n              alt=\"linkedin icon\"\n              height=\"40\"\n              width=\"40\"\n              src=\"https://cdn.jsdelivr.net/npm/simple-icons@latest/icons/linkedin.svg\"\n            />\n          </a>\n        </li>\n      </ul>\n    );\n  }\n}\n\nexport default Social;\n","import React, { Component } from \"react\";\n\nimport \"./Hero.css\";\nimport MyFace from \"../assets/me.jpg\";\nimport Social from \"../social/Social\";\n\nclass Hero extends Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"card-body main-card\">\n          <div id=\"content-card\" className=\"card flex-md-row\">\n            <img alt=\"Scott Murray's face\" className=\"me-img card-body md-4\" src={MyFace} align=\"left\" />\n            <div className=\"card-body d-flex flex-column\">\n              <h1>Scott Murray</h1>\n              <h5 className=\"text-muted\">Software Engineer at Zip</h5>\n              <p className=\"normal-paragraph\">\n                I'm a caffiene addict with far too many Raspberry PIs to be\n                considered sane. When I'm not being a psychotic programmer or a\n                borderline average musician, you can usually find me hanging\n                around Auckland.\n              </p>\n              <p className=\"normal-paragraph\">\n                The main plan for this website is to be a dumping ground for any\n                projects I feel confident in sharing with you :)\n              </p>\n              <p className=\"normal-paragraph\">\n                I'm usually pretty responsive on most social media sites. Head\n                to these links if you need to contact me\n              </p>\n              <Social />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Hero;\n","import React from \"react\";\nimport \"./App.css\";\nimport AppHeader from \"./header/AppHeader\";\nimport Hero from \"./hero/Hero\";\n\nfunction App() {\n  return (\n    <div className=\"cool-bg\" role=\"main\">\n      <header>\n        <AppHeader />\n      </header>\n      <div>\n        <Hero></Hero>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}